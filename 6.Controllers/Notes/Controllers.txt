Controllers

--What is a Controller?
	> A Controller is a class that is used to group-up a set of actions (or action methods).
	> Each action method can act as an endpoint.
	> Action methods perform certain operations when a request is received and returns the result(response).

--Creating Controllers
	> Should be either or both:
		*The class name should be suffixed with "Controller".
		*The [Controller] attribute is applied to the same class or its base class.
	> Format: 
		*****
			[Controller]
			class ClassNameController
			{
				//action methods here
			}
		*****
	> Optional:
		*Is a public class.
		*Inherited from Microsoft.AspNetCore.Mvc.Controller.

--Enable 'routing' in Controllers
	> AddController() => Adds all controllers as services in the IServiceCollection so that they can be accessed when a specific endpoint needs it.
		*Example: builder.Services.AddControllers();
	> MapControllers() => Adds all action methods as endpoints so that no need of using UseEndPoints() method for adding action methods as endpoints.
		*Example: app.MapControllers();

--Responsibilities of Controllers
	> Reading requests => Extracting data values from request such as query string parameters, request body, request cookies, request headers, etc.
	> Validation => Validate incoming request details (query string parameters, request body, request cookies, request headers etc).
	> Invoking Models => Calling business logic methods. Generally business operations are available as 'services'.
	> Preparing Response => Choosing what kind of response has to be sent to the client & also preparing the response (action result).

--ContentResult
	> Can represent any type of response, based on the specified MIMI type.
	> MIMI type represents type of the content such as text/plain, text/html, application/json, application/xml, application/pdf, etc

--JsonResult
	> JsonResult can represent an object in JavaScript Object Notation (JSON) format.

--FileResults 
	> File results sends the content of a file as a response.
	> We have three types of File Results:
		*VirtualFileResult
			>> Example:
					**return new VirtualFileResult("file relative path", "content-type");

		*PhysicalFileResult
			>> Example:
					**return new PhysicalFileResult("file absolute path", "content-type");

		*FileContentResult
			>> Example:
					**return new FileContentResult(byte_array, "content-type");
				 
--IActionResult
	> It is the parent interface for all action result classes such as ContentResult, JsonResult, RedirectResult, StatusCodeResult, ViewResult, etc.
	> By mentioning the return type as IActionResult, you can return either of the subtypes of IActionResult.

--Status Code Results
	> Status code results sends an empty response with specified status code.
	> Some semantic Status Code results we can return are:
		*StatusCodeResult => Any Status Code
			>> Example:
				**return new StatusCodeResult(status_code);

		*UnauthorizedResult => 401
			>> Example:
				**return new UnauthorizedResult();

		*BadRequestResult => 400
			>> Example:
				**return new BadRequestResult();

		*NotFoundResult => 404
			>> Example:
				**return new NotFoundResult();