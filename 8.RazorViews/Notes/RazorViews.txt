Razor Views

--MVC Architecture
	> "Model-View-Controller" (MVC) is an architectural pattern that separates application code into three main components: Models, Views, and Controllers.
	> Controller can invoke the Model and View.
	> The View can invoke the Model.
	> 1. Controller invokes Business Model.
	> 2. Controller creates object of VIew Model.
	> 3. Controller invokes View.
	> 4. View accesses View Model.
	> The Action Method is the entry point for our MVC Architecture.
	> The Controller takes responsibility of receiving the request and decides what response should be sent.
	> For example, when a user logs in, the Action Method sends the credentials to the Business Model to perform authorization validation and then the business model sends it back. Then the Action Method creates a View Model. After, it supplies the View Model object to the View to present the data. The View contains the HTML code to visualize the data.

--Responsibilities of Model-View-Controller (in order)
	> Controller:
		*Receives HTTP request data.
		*Invoke business model to execute business logic.

	> Business Model:
		*Receives input data from the controller.
		*Performs business operations such as retrieving/inserting data from/to database.
		*Sends data of the database back to the controller.

	> Controller:
		*Creates object of ViewModel from the controller.
		*Selects a View & invoke it & also pass the object of the ViewModel to the View.

	> View:
		*Receives the object of ViewModel from the controller.
		*Accesses the properties of ViewModel to render data in HTML code.
		*After the View renders, the rendered View result will be sent as response.

--Benefits/Goals of MVC Architectural Pattern
	 > Allows for separation of concerns.
	 > Each component (model, view, and controller) performs a single responsibility.
	 > Identifying and fixing errors is simpler.
	 > Each component (model, view, and controller) can be developed independently.
	 > In practical, both view and controller depend of the model. Model doesn't depend on neither view nor the controller. This is one of the key benefits of the 'clean separation'. This separation allows the model to be built and tested independently.
	 > Unit testing each individual component is easier.

--Views
	> A View is a webpage (.cshtml) that is responsible for containing presentation logic that merges data along with the static design code (HTML).
	> Roadmap:
		1. Controller creates object of View Model and fills data in its properties.
		2. Controller selects an appropriate view and invokes the same View & supplies object of View Model to the View.
		3. View accesses the View Model.

--Razor View Engine
	> Razor Code Block => Razor code block is a C# code block that contains one or more lines of C# code that can contain any statements and local functions.
		>> Format:
			*****
				@{
					C# / html code here
				}
			*****

	> Razor Expressions => Razor expression is a C# expression (accessing a field, property, or method call) that returns a value.
		>> Format:
			*****
				@Expression
					--or--
				@(Expression)
			*****
			
--More on Views
    > Views contain HTML markup with Razor markup (C# code in view to render dynamic content).
    > Razor is the view engine that defines syntax to write C# code in the view. @ is the syntax of Razor syntax.
    > View is NOT supposed to have lots of C# code. Any code written in the view should relate to presenting the content (presentation logic).
    > View should neither directly call the business model nor call the controllers action methods, but it can send requests to the controller.
    
--Razor - if
    > Format:
        *****
            @if(condition)
            {
               // C# / html code here
            }
            else 
            {
               // C# / html code here
            }
            
--Razor - Switch/Case
    > Format: 
        *****
            @switch (variable)
            {
                case value1: // C# / html code here; break;
                case value2: // C# / html code here; break;
                default: // C$ / html code here; break;
            }
        *****
        
--Razor - foreach
    > Format:
        *****
            @foreach (var variable in collection)
            {
                // C# / html code here
            }
        *****
        
--Razor - for 
    > Format: 
        *****
            @for(initialization; condition; iteration)
            {
                C# / html code here
            }
        *****
        
--Razor - Literal
    > Format 1:
        *****
            @{
                @: static text
            }
        *****
        
    > Format 2:
        *****
            <text>static text</text>
        *****
        
--Razor - Local Functions
    > Local functions are only callable within the same view,
    > Format:
        @{
            return_type method_name(arguments)
            {
                // C# / html code here
            }
        }
        
--Html.Raw()
    > Format: 
        *****
            @{
                string variable = "html code";
            }
            
            @Html.Raw(variable) //prints the html markup without encoding (converting html tags into plain text)
        *****
        
 --ViewData
    > ViewData is a dictionary object that is automatically created up on receiving a request will be automatically 
      deleted before sending response to the client. It is mainly used to send data from controller to view.
    > ViewData is a property of Microsoft.AspNetCore.Mvc.Controller class and Microsoft.AspNetCore.Mvc.Razor.RazorPage
      class.
    > It is of Microsoft.AspNet.Mvc.ViewFeatures.ViewDataDictionary type.
    > It is derived from IDictionary<KeyValuePair<string, object>> type.