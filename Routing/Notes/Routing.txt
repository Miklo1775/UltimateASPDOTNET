Routing in ASP.NET Core

--Introduction to Routing
	> Routing is a process of matching incoming HTTP requests by checking HTTP method and url; and then invoking corresponding endpoints.

--Routing - UseRouting and UseEndpoints
	> UseRouting();
		*Enables routing and selects an appropriate end point based on the url path and HTTP method.
		*Format:
			****
				app.UseRouting();
			****
	> UseEndpoints();
		*Executes the appropriate endpoint based on the endpoint selected by the above UseRouting() method.
		*Format:
			****
				app.UseEndpoints(endpoints => 
				{
					endpoints.Map(...);
					endpoints.MapGet(...);
					endpoints.MapPost(...);
				});
			****

--GetEndPoint();
	> Returns an instance of Microsoft.AspNetCore.Http.Endpoint type, which represents an endpoint.
	> That instance contains two important properties: DisplayName, RequestDelegate.
	> Placeing GetEndPoint before UseRouting() returns null.
	> Placing GetEndPoint after UseRouting returns Endpoint object.

--Route Parameters
	> The varying part of the URL.
	> Format:
		****
			/files/{filename}.{extension}
			/employee/profile/{employeename}
		****

--Default Route Parameters
	> A route parameter with default value matches with any value. It also matches with empty values. In this case, the default value will be considered into the parameter.
	> Format: 
		****
			"{parameter=default_value}"
		****

--Optional Route Parameters
	> "?" indicates an optional parameter. That means it matches with a value or empty value also.
	> Format: 
		****
			"{parameter?}"
		****

--Constraints
	> Allows only a specified type to be accepted.
	> If a type doesn't match a specified constraint, the request will move down to the next middleware in the pipeline.
	> Some constraints that are valid include:
		*int => Matches with any integer
		*bool => Matches with true or false. Case-insensitve.
		*datetime => Matches a valid DateTime value with formats "yyyy-MM-dd hh:mm:ss tt" and "MM/dd/yyyy hh:mm:ss tt".
		*decimal => Matches with a valid decimal value.
		*long => Matches a valid long value.
		*guid => Matches with a valid Guid value (Globally Unique Identifier - A hexadecimal that is universally unique).
		*minlength(value) => Matches with a string that has at least specified number of characters.
		*maxlength(value) => Matches with a string that has less that or equal to the specified numbers of characters.
		*length(min,max) => Matches with a string that has number of characters between given minimum and maximum length (both numbers inclusive).
		*length(value) => Matches with a string that has exactly specified number of characters.
		*min(value) => Matches with an integer value greater than or equal to the specified value.
		*max(value) => Matches with an integer value less than or equal to the specified value.
		*range(min,max) => Matches with an integer value between the specified minimum and maximum values(both numbers including).
		*alpha => Matches with a string that contains only alphanumeric characters.
		*regex(expression) => Matches with a string that matches with the specified regular expression.

--Custom Route Constraints Class
	> Format:
		*****
			public class ClassName : IRouteConstraint
			{
				public bool Match(HttpContext? HttpContext, IRouter? route, string routeKey, RouteValueDictionary values, RouteDirection routeDirection)
				{
					//return true or false
				}
			}
			////////Adding the custom constraint to routing.
			builder.Services.AddRouting(options => 
			{
				options.ContstaintMap.Add("name", typeof(ClassName));
			});
		*****

--Endpoint Selection Order
	> These are how endpoints should be ordered with the first being of highest precedence.
		1. URL template with more segments:
			*Example: "a/b/c/d" is higher than "a/b/c"
		2. URL template with literal text has more precedence than a parameter segment.
			*Example: "a/b" is higher than "a/{parameter}"
		3. URL template that has a parameter segment with constraints has more precedence than a parameter segment without constraints.
			*Example: "a/{b:int}" is higher than "a/b"
		4. Catch-all parameters (**).
			*Example: "a/b" is higher than "a/**"

--WebRoot and UseStaticFiles()
	> To enable the use of static files like working with different views, we are required to use the UseStaticFiles() middleware.
	> Static files are served from the WebRoot folder with the default WebRoot folder being "wwwroot".
	> The "wwwroot" folder can also be configured manually.
	> Multiple wwwroot folders can also be used.