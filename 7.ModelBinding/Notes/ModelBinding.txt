Model Binding

--What is Model Binding?
	> Model Binding is a feature of ASP.NET Core that reads values from HTTP requests and passes them as arguments to the action method.
	> Model Binging simplifies retrieving data in this priority:
		1. Form Fields
		2. Request Body
		3. Route Data
		4. Query String Parameters

--RouteData vs Query String
	> When using route parameters, Model Binding will take the values from the route parameters and pass them into the Action Method.
	> When using Query String, the values from the query string are passed into the Action method.
	> When using both in conjunction, since RouteData has higher priority than Query String, Model Binding will pull the values from the RouteData instead of the Query String unless the values from the RouteData aren't present.

--FromQuery vs FromRoute
	> Since we know that Model Binding has priority, we can override RouteData and Query String priorities to choose what Model Binding we prefer: FromQuery & FromRoute
	> FromQuery Example:
		*****
			public IActionResult ActionMethodName([FromQuery] type parameter)
			{
				//GETS VALUE FROM QUERY STRING ONLY
				//code here
			}
		*****

	> FromRoute Example:
		*****
			public IActionResult ActionMethodName([FromRoute] type parameter)
			{	
				//GETS VALUE FROM ROUTE PARAMETERS ONLY
				//code here
			}
		*****

--Models
	> A Model is a class that represents structure of data (as properties) that you would like to receive from the request and/or send to the response.
	> Also known as POCO (Plain Old CLR Objects)

--form-urlencoded and form-data
	> form-urlencoded (default)
		*Request Headers => Content-Type: application/x-www-form-urlencoded
		*Request Body => param1=value1&param2=value2
	> form-data
		*Request Headers => Content-Type: multipart/form-data
		*Request Body => Content-Disposition: form-data; name="param1"
						 value1
						 ---------------------------------------------
						 Content-Disposition: form-data; name="param2"
						 value2

	> The biggest difference between form-urlencoded and form-data is that form-urlencoded is much more suitable for simple fields/data whereas form-data is much more suitable for more complex and lengthy data. Its worth noting that form-urlencoded can still handle lengthy fields if you need to for whatever reason.

--Intro to Model Validations
	> Model Validations allow us to simplify our code in our controllers when receiving a request.
	> Model Validation occurs after Model Binding.
	> Format:
		*****
			class ClassName 
			{
				[Attribute] //APPLIES VALIDATION RULE ON THIS PROPERTY
				public type PropertyName { get; set; }
			}
		*****

--ModelState
	> isValid => Specifies whether there is at least one validation error or not (boolean).
	> Values => Contains each model property value with corresponding "Errors" property that contains list of validation errors of that model property.
	> ErrorCount => Returns number of errors.

--Model Validations
	> Required => Specifies that the property value is required (can't be blank or empty)
		*[Required(ErrorMessage = "Value")]

	> StringLength => Specifies minimum and maximum length (number of characters) allowed in the string.
		*[StringLength(int maximumLength, MinimumLength = value, ErrorMessage = "Value")]

	> Range => Specifies minimum and maximum numerical value allowed.
		*[Range(int minimum, int maximum, ErrorMessage = "Value")]

	> RegularExpression => Specifies the valid pattern.
		*[RegularExpression(string pattern, ErrorMessage = "Value")]

	> EmailAddress => Specifies that the value should be a valid email address.
		*[EmailAddress(ErrorMessage = "Value")]

	> Phone => Specifies that the value should be a valid phone number.
		*[Phone(ErrorMessage = "Value")]

	> Compare => Specifies that the values of current property and other property should be the same.
		*[Compare(string otherProperty, ErrorMessage = "Value")]

	> Url => Specifies that the value should be a valid URL (website address).
		*[Url(ErrorMessage = "Value")]

	> ValidateNever => Specifies that the property should not be validated (excludes the property from model validation).
		*[ValidateNever]

--Custom Validations
	> Format:
		*****
			class ClassName : ValidationAttribute
			{
				public override ValidationResult? IsValid(object? value, ValidationContext validationContext)
				{
					//return ValidationResult.Success;
					//[or] return new ValidatoinResult("error message")
				}
			}
		*****

--IValidatableObject
	> Format:
		*****
			class ClassName : IValidatableObject
			{
				//model properties here

				public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
				{
					if(condition)
					{
						yield return new ValidationResult("error message");
					}
				}
			}
		*****

--[Bind]
	> This attribute specifies that only the specified properties should be included in model binding.
	> By default, all properties are binded.
	> Prevents over-posting (post values into unexpected properties) especially in "Create" scenarios.
	> Format:
		*****
			class ClassNameController : Controller
			{
				public IActionResult ActionMethodNamme([Bind(nameof(ClassName.PropertyName), nameof(ClassName.PropertyName))] ClassName parameterName)
				{
				}
			}
		*****

--[BindNever]
	> This attribute specifies that the specified property should NOT be included in model binding.
	> Useful when you have a lot of properties and only want to eliminate a few properties from model binding.
	> Format: 
		*****
			class ModelClassName 
			{
				[BindNever]
				public type PropertyName {get; set;}
			}
		*****

--[FromBody]
	> Format:
		*****
			//ENABLES THE INPUT FORMATTERS TO READ DATA FROM THE REQUEST BODY (AS JSON OR XML OR CUSTOM) ONLY
			public IActionResult ActionMethodName([FromBody] type parameter)
			{
				//code here
			}
		*****

--Input Formatters
	> Input Formatters are the internal classes in ASP.NET that are used to convert or transform the request body into a model object.
	> By default, the formatter used is the JsonInputFormatter.
	> To enable the XML formatters, we need to add this service:
		*****
			builder.Services.AddControllers().AddXmlSerializerFormatters();
		*****
	> Based on the headers, the appropriate input formatter will be selected.

--Custom Model Binder
	> To perform complex manipulations, we need to use a Custom Model Binder.
	> Format:
		*****
			class ClassName : IModelBinder
			{
				public Task BindModelAsync(ModelBindingContext bindingContext)
				{
					//GETS VALUE FROM REQUEST
					bindingContext.ValueProvider.GetValue("FirstName");

					//RETURNS MODEL OBJECT AFTER READING DATA FROM THE REQUEST
					bindingContext.Result = ModelBindingResult.Success(your_object);
				}
			}
		*****

--Custom Model Binder Provider
	> Format:
		*****
			class ClassName : IModelBinderProvider
			{
				public IModelBinder GetBinder(ModelBinderProviderContext providerContext)
				{
					//RETURNS TYPE OF CUSTOM MODEL BINDER CLASS TO BE INVOKED
					return new BinderTypeModelBinder(typeof(YourModelBinderClassName));
				}
			}
		*****