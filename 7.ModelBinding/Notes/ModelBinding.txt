Model Binding

--What is Model Binding?
	> Model Binding is a feature of ASP.NET Core that reads values from HTTP requests and passes them as arguments to the action method.
	> Model Binging simplifies retrieving data in this priority:
		1. Form Fields
		2. Request Body
		3. Route Data
		4. Query String Parameters

--RouteData vs Query String
	> When using route parameters, Model Binding will take the values from the route parameters and pass them into the Action Method.
	> When using Query String, the values from the query string are passed into the Action method.
	> When using both in conjunction, since RouteData has higher priority than Query String, Model Binding will pull the values from the RouteData instead of the Query String unless the values from the RouteData aren't present.

--FromQuery vs FromRoute
	> Since we know that Model Binding has priority, we can override RouteData and Query String priorities to choose what Model Binding we prefer: FromQuery & FromRoute
	> FromQuery Example:
		*****
			public IActionResult ActionMethodName([FromQuery] type parameter)
			{
				//GETS VALUE FROM QUERY STRING ONLY
				//code here
			}
		*****

	> FromRoute Example:
		*****
			public IActionResult ActionMethodName([FromRoute] type parameter)
			{	
				//GETS VALUE FROM ROUTE PARAMETERS ONLY
				//code here
			}
		*****

--Models
	> A Model is a class that represents structure of data (as properties) that you would like to receive from the request and/or send to the response.
	> Also known as POCO (Plain Old CLR Objects)

--form-urlencoded and form-data
	> form-urlencoded (default)
		*Request Headers => Content-Type: application/x-www-form-urlencoded
		*Request Body => param1=value1&param2=value2
	> form-data
		*Request Headers => Content-Type: multipart/form-data
		*Request Body => Content-Disposition: form-data; name="param1"
						 value1
						 ---------------------------------------------
						 Content-Disposition: form-data; name="param2"
						 value2

	> The biggest difference between form-urlencoded and form-data is that form-urlencoded is much more suitable for simple fields/data whereas form-data is much more suitable for more complex and lengthy data. Its worth noting that form-urlencoded can still handle lengthy fields if you need to for whatever reason.

--Intro to Model Validations
	> Model Validations allow us to simplify our code in our controllers when receiving a request.
	> Model Validation occurs after Model Binding.
	> Format:
		*****
			class ClassName 
			{
				[Attribute] //APPLIES VALIDATION RULE ON THIS PROPERTY
				public type PropertyName { get; set; }
			}
		*****

--ModelState
	> isValid => Specifies whether there is at least one validation error or not (boolean).
	> Values => Contains each model property value with corresponding "Errors" property that contains list of validation errors of that model property.
	> ErrorCount => Returns number of errors.