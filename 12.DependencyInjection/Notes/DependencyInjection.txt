Dependency Injection

--Services
    > 'Service' is a class that contains business logic such as business 
    calculations and business validations that are specific to the domain of the
    client's business.
    > Service is an abstraction layer (middle layer) between presentation layer 
    (or application layer) and data layer.
    > It makes the business logic seperated from the presentation amd data layer
    .
    > It makes the business logic to be unit testable easy.
    > Will be invoked by controller.
    
--Dependency Inversion Principle (DIP)
    > Dependency Problem 
         >> Higher level modules depend on lower level modules -- tightly 
         coupled.
         >> The developer of the higher-level module should wait until the 
         completion of development of the lower-level module.
         >> Any changes made in the lower-level module affects changes in the 
         higher level module.
         >> Requires much code changes to interchange an alternative lower-level
          module.
         >> Difficult to test a single module without effecting / testing the 
         other module.
    
    > Dependency Inversion Principle (DIP) is a design principle (guideline) 
    which is a solution for the dependency problem.
        >> The higher-level modules (clients) should not depend on the low-level
         modules (dependencies). Both should depend on abstractions (interfaces 
         or abstract class.)
        >> Abstractions should not depend on details (both client or dependency)
        . Details( both client and dependency) should depend on abstractions.
        >> So for our demo, the controller shouldnt depend on the Service class 
        nor should the Service class depend on the controller. They both should 
        depend on abstractions.
        
    > Interface (abstraction) Format:
        *****
            public interface IService
            {
                void ServiceMethod();
            }
        *****
        
    > Service (dependency) Format:
        *****
            public class MyService : IService
            {
                public void ServiceMethod()
                {
                    ...
                }
            }
        *****
        
    > Controller (client) Format:
        *****
            public class MyController : Controller
            {
                private readonly IService _service;
                
                public MyController()
                {
                    _service = ...; //how to create object?
                }
                
                public IActionResult ActionMethod()
                {
                    _service.ServiceMethod();
                }
            }
        *****
        
--Inversion of Control (IoC)
    > Inversion of Control is a design pattern (reusable solution for a common 
    problem), which suggests "IoC container" for implementation of Dependency 
    Inversion Principle (DIP).
    > It inverses the control by shifting the control to IoC container.
    > "Dont call us, we will call you" pattern.
    > It can be implemented by other design patterns such as events, service 
    locator, dependency injection, etc.
    > At runtime, the controller tells the IoC container "Give me an object 
    that implements the Interface" and the IoC container supplies the controller
    with an object of Service class.
    > All dependencies should be added into the IServiceCollection (acts as IoC 
    container).
        >>Format:
            *****
                builder.Services.Add(
                    new ServiceDescriptor(
                        typeof(Interface),
                        typeof(Service)
                        ServiceLifetime.LifeTime //Transient, Scoped, Singleton
                    )
                );
            *****